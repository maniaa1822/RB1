[
    {
        "label": "sympy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sympy",
        "description": "sympy",
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "symbols",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "Matrix",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "simplify",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "symbols",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "Matrix",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "simplify",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "eye",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "symbols",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "Matrix",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "simplify",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "symbols",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "Matrix",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "simplify",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "eye",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "I",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "Matrix",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "simplify",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "eye",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "atan2",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "acos",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "asin",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "Matrix",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "simplify",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "eye",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "zeros",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "dh_matrix",
        "importPath": "robotics_lib.kinematics",
        "description": "robotics_lib.kinematics",
        "isExtraImport": true,
        "detail": "robotics_lib.kinematics",
        "documentation": {}
    },
    {
        "label": "get_f_r",
        "importPath": "robotics_lib.kinematics",
        "description": "robotics_lib.kinematics",
        "isExtraImport": true,
        "detail": "robotics_lib.kinematics",
        "documentation": {}
    },
    {
        "label": "geometric_jacobian",
        "importPath": "robotics_lib.kinematics",
        "description": "robotics_lib.kinematics",
        "isExtraImport": true,
        "detail": "robotics_lib.kinematics",
        "documentation": {}
    },
    {
        "label": "dh_matrix",
        "importPath": "robotics_lib.kinematics",
        "description": "robotics_lib.kinematics",
        "isExtraImport": true,
        "detail": "robotics_lib.kinematics",
        "documentation": {}
    },
    {
        "label": "get_f_r",
        "importPath": "robotics_lib.kinematics",
        "description": "robotics_lib.kinematics",
        "isExtraImport": true,
        "detail": "robotics_lib.kinematics",
        "documentation": {}
    },
    {
        "label": "get_rotation_mat",
        "importPath": "robotics_lib.kinematics",
        "description": "robotics_lib.kinematics",
        "isExtraImport": true,
        "detail": "robotics_lib.kinematics",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "robotics_lib.geometric",
        "description": "robotics_lib.geometric",
        "isExtraImport": true,
        "detail": "robotics_lib.geometric",
        "documentation": {}
    },
    {
        "label": "elem_rot_mat",
        "importPath": "robotics_lib",
        "description": "robotics_lib",
        "isExtraImport": true,
        "detail": "robotics_lib",
        "documentation": {}
    },
    {
        "label": "elem_rot_mat_inverse",
        "importPath": "robotics_lib",
        "description": "robotics_lib",
        "isExtraImport": true,
        "detail": "robotics_lib",
        "documentation": {}
    },
    {
        "label": "euler_rotation",
        "importPath": "robotics_lib",
        "description": "robotics_lib",
        "isExtraImport": true,
        "detail": "robotics_lib",
        "documentation": {}
    },
    {
        "label": "euler_rotation_inverse",
        "importPath": "robotics_lib",
        "description": "robotics_lib",
        "isExtraImport": true,
        "detail": "robotics_lib",
        "documentation": {}
    },
    {
        "label": "rpy_rotation",
        "importPath": "robotics_lib",
        "description": "robotics_lib",
        "isExtraImport": true,
        "detail": "robotics_lib",
        "documentation": {}
    },
    {
        "label": "angle_axis_to_rot_mat",
        "importPath": "robotics_lib",
        "description": "robotics_lib",
        "isExtraImport": true,
        "detail": "robotics_lib",
        "documentation": {}
    },
    {
        "label": "angle_axis_from_rot_mat",
        "importPath": "robotics_lib",
        "description": "robotics_lib",
        "isExtraImport": true,
        "detail": "robotics_lib",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "l1",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometric_jacobian",
        "description": "robotics_lib.examples.example_geometric_jacobian",
        "peekOfCode": "l1 = symbols('l1', real=True)\n#%% Create DH parameter table for a RRR robot\n# Example: 3-DOF robot with all revolute joints\ndh_table = Matrix([\n    [0,      l1,     0,  q1],           # alpha, a, d, theta for joint 1\n    [pi/2,   0,      0,  q2 + pi/2],    # alpha, a, d, theta for joint 2\n    [0,      0,      q3, 0]             # alpha, a, d, theta for joint 3\n])\ndh_table\n#%% Calculate transformation matrices and forward kinematics",
        "detail": "robotics_lib.examples.example_geometric_jacobian",
        "documentation": {}
    },
    {
        "label": "dh_table",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometric_jacobian",
        "description": "robotics_lib.examples.example_geometric_jacobian",
        "peekOfCode": "dh_table = Matrix([\n    [0,      l1,     0,  q1],           # alpha, a, d, theta for joint 1\n    [pi/2,   0,      0,  q2 + pi/2],    # alpha, a, d, theta for joint 2\n    [0,      0,      q3, 0]             # alpha, a, d, theta for joint 3\n])\ndh_table\n#%% Calculate transformation matrices and forward kinematics\nT, A = dh_matrix(dh_table)\nf_r_3D = get_f_r(T)\nsimplify(f_r_3D)",
        "detail": "robotics_lib.examples.example_geometric_jacobian",
        "documentation": {}
    },
    {
        "label": "f_r_3D",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometric_jacobian",
        "description": "robotics_lib.examples.example_geometric_jacobian",
        "peekOfCode": "f_r_3D = get_f_r(T)\nsimplify(f_r_3D)\n#%% Calculate geometric Jacobian\n# Define joint sequence ('r' for revolute, 'p' for prismatic)\nsequence = 'rrp'  # our robot has two revolute joints and one prismatic\n# Define joint variables\nq_vars = Matrix([q1, q2, q3])\n#%% Calculate geometric Jacobian\nJl, Ja = geometric_jacobian(f_r_3D, sequence, q_vars, dh_table)\n#%% Display linear part",
        "detail": "robotics_lib.examples.example_geometric_jacobian",
        "documentation": {}
    },
    {
        "label": "sequence",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometric_jacobian",
        "description": "robotics_lib.examples.example_geometric_jacobian",
        "peekOfCode": "sequence = 'rrp'  # our robot has two revolute joints and one prismatic\n# Define joint variables\nq_vars = Matrix([q1, q2, q3])\n#%% Calculate geometric Jacobian\nJl, Ja = geometric_jacobian(f_r_3D, sequence, q_vars, dh_table)\n#%% Display linear part\nprint(\"Linear part of geometric Jacobian:\")\nsimplify(Jl)\n#%% Display angular part\nprint(\"\\nAngular part of geometric Jacobian:\")",
        "detail": "robotics_lib.examples.example_geometric_jacobian",
        "documentation": {}
    },
    {
        "label": "q_vars",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometric_jacobian",
        "description": "robotics_lib.examples.example_geometric_jacobian",
        "peekOfCode": "q_vars = Matrix([q1, q2, q3])\n#%% Calculate geometric Jacobian\nJl, Ja = geometric_jacobian(f_r_3D, sequence, q_vars, dh_table)\n#%% Display linear part\nprint(\"Linear part of geometric Jacobian:\")\nsimplify(Jl)\n#%% Display angular part\nprint(\"\\nAngular part of geometric Jacobian:\")\nsimplify(Ja)\n#%% Verify Jacobian at specific configuration",
        "detail": "robotics_lib.examples.example_geometric_jacobian",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometric_jacobian",
        "description": "robotics_lib.examples.example_geometric_jacobian",
        "peekOfCode": "config = {q1: pi/4, q2: pi/3, q3: 0.5, l1: 1.0}\n# Calculate Jacobian at this configuration\nJl_num = Jl.subs(config)\nJa_num = Ja.subs(config)\n# Combine into full geometric Jacobian\nJ_geometric = Matrix.vstack(Jl_num, Ja_num)\n# Display numerical result\nJ_geometric.evalf()",
        "detail": "robotics_lib.examples.example_geometric_jacobian",
        "documentation": {}
    },
    {
        "label": "Jl_num",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometric_jacobian",
        "description": "robotics_lib.examples.example_geometric_jacobian",
        "peekOfCode": "Jl_num = Jl.subs(config)\nJa_num = Ja.subs(config)\n# Combine into full geometric Jacobian\nJ_geometric = Matrix.vstack(Jl_num, Ja_num)\n# Display numerical result\nJ_geometric.evalf()",
        "detail": "robotics_lib.examples.example_geometric_jacobian",
        "documentation": {}
    },
    {
        "label": "Ja_num",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometric_jacobian",
        "description": "robotics_lib.examples.example_geometric_jacobian",
        "peekOfCode": "Ja_num = Ja.subs(config)\n# Combine into full geometric Jacobian\nJ_geometric = Matrix.vstack(Jl_num, Ja_num)\n# Display numerical result\nJ_geometric.evalf()",
        "detail": "robotics_lib.examples.example_geometric_jacobian",
        "documentation": {}
    },
    {
        "label": "J_geometric",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometric_jacobian",
        "description": "robotics_lib.examples.example_geometric_jacobian",
        "peekOfCode": "J_geometric = Matrix.vstack(Jl_num, Ja_num)\n# Display numerical result\nJ_geometric.evalf()",
        "detail": "robotics_lib.examples.example_geometric_jacobian",
        "documentation": {}
    },
    {
        "label": "Rx",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "Rx = elem_rot_mat('x', alpha)\nRy = elem_rot_mat('y', beta)\nRz = elem_rot_mat('z', theta)\n# Display symbolic results\n{\n    'Rx': Rx,\n    'Ry': Ry,\n    'Rz': Rz\n}\n# %%",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "Ry",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "Ry = elem_rot_mat('y', beta)\nRz = elem_rot_mat('z', theta)\n# Display symbolic results\n{\n    'Rx': Rx,\n    'Ry': Ry,\n    'Rz': Rz\n}\n# %%\n# Numerical example: evaluate for specific angles",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "Rz",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "Rz = elem_rot_mat('z', theta)\n# Display symbolic results\n{\n    'Rx': Rx,\n    'Ry': Ry,\n    'Rz': Rz\n}\n# %%\n# Numerical example: evaluate for specific angles\nangles_rad = {alpha: pi/4, beta: pi/3, theta: pi/6}",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "angles_rad",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "angles_rad = {alpha: pi/4, beta: pi/3, theta: pi/6}\n{\n    'Rx_num': Rx.subs(angles_rad).evalf(),\n    'Ry_num': Ry.subs(angles_rad).evalf(),\n    'Rz_num': Rz.subs(angles_rad).evalf()\n}\n# %% [markdown]\n# ## 2. Euler Rotation Matrices (euler_rotation)\n# Examples of different Euler angle sequences.\n# %%",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "R_xyz",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "R_xyz = euler_rotation('xyz', [phi, theta, psi])\nR_zyz = euler_rotation('zyz', [phi, theta, psi])\nR_zyx = euler_rotation('zyx', [phi, theta, psi])\n# Display symbolic results\n{\n    'xyz_sequence': simplify(R_xyz),\n    'zyz_sequence': simplify(R_zyz),\n    'zyx_sequence': simplify(R_zyx)\n}\n# %%",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "R_zyz",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "R_zyz = euler_rotation('zyz', [phi, theta, psi])\nR_zyx = euler_rotation('zyx', [phi, theta, psi])\n# Display symbolic results\n{\n    'xyz_sequence': simplify(R_xyz),\n    'zyz_sequence': simplify(R_zyz),\n    'zyx_sequence': simplify(R_zyx)\n}\n# %%\n# Numerical example",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "R_zyx",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "R_zyx = euler_rotation('zyx', [phi, theta, psi])\n# Display symbolic results\n{\n    'xyz_sequence': simplify(R_xyz),\n    'zyz_sequence': simplify(R_zyz),\n    'zyx_sequence': simplify(R_zyx)\n}\n# %%\n# Numerical example\neuler_angles = {phi: pi/6, theta: pi/4, psi: pi/3}",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "euler_angles",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "euler_angles = {phi: pi/6, theta: pi/4, psi: pi/3}\nR_xyz.subs(euler_angles).evalf()\n# %% [markdown]\n# ## 3. Roll-Pitch-Yaw Rotations (rpy_rotation)\n# Examples of RPY rotations with different sequences.\n# %%\n# Define symbolic RPY angles\nroll, pitch, yaw = symbols('roll pitch yaw')\n# Different RPY sequences\nR_rpy_xyz = rpy_rotation('xyz', [roll, pitch, yaw])",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "R_rpy_xyz",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "R_rpy_xyz = rpy_rotation('xyz', [roll, pitch, yaw])\nR_rpy_zyx = rpy_rotation('zyx', [roll, pitch, yaw])\n# Display symbolic results\n{\n    'rpy_xyz': simplify(R_rpy_xyz),\n    'rpy_zyx': simplify(R_rpy_zyx)\n}\n# %%\n# Compare RPY with equivalent Euler rotation\n# RPY xyz is equivalent to Euler zyx with reversed angles",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "R_rpy_zyx",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "R_rpy_zyx = rpy_rotation('zyx', [roll, pitch, yaw])\n# Display symbolic results\n{\n    'rpy_xyz': simplify(R_rpy_xyz),\n    'rpy_zyx': simplify(R_rpy_zyx)\n}\n# %%\n# Compare RPY with equivalent Euler rotation\n# RPY xyz is equivalent to Euler zyx with reversed angles\ndiff = simplify(R_rpy_xyz - euler_rotation('zyx', [yaw, pitch, roll]))",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "diff",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "diff = simplify(R_rpy_xyz - euler_rotation('zyx', [yaw, pitch, roll]))\ndiff  # Should be zero matrix\n# %% [markdown]\n# ## 4. Elementary Rotation Matrix Inverse\n# Example of extracting rotation angle from rotation matrix.\n# %%\n# Create a symbolic rotation matrix\ntheta = symbols('theta')\nR = elem_rot_mat('z', theta)\n#%%",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "theta",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "theta = symbols('theta')\nR = elem_rot_mat('z', theta)\n#%%\n# Extract the angle back\ntheta_recovered = elem_rot_mat_inverse('z', R)\n# Should return theta\nsimplify(theta_recovered)\n# %% [markdown]\n# ## 5. Euler Rotation Matrix Inverse\n# Example of extracting Euler angles from rotation matrix.",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "R = elem_rot_mat('z', theta)\n#%%\n# Extract the angle back\ntheta_recovered = elem_rot_mat_inverse('z', R)\n# Should return theta\nsimplify(theta_recovered)\n# %% [markdown]\n# ## 5. Euler Rotation Matrix Inverse\n# Example of extracting Euler angles from rotation matrix.\n# %%",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "theta_recovered",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "theta_recovered = elem_rot_mat_inverse('z', R)\n# Should return theta\nsimplify(theta_recovered)\n# %% [markdown]\n# ## 5. Euler Rotation Matrix Inverse\n# Example of extracting Euler angles from rotation matrix.\n# %%\n# Create a symbolic rotation matrix using Euler angles\nphi, theta, psi = symbols('phi theta psi')\nR_euler = euler_rotation('zyx', [phi, theta, psi])",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "R_euler",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "R_euler = euler_rotation('zyx', [phi, theta, psi])\n# Extract angles back\nphi_rec, theta_rec, psi_rec = euler_rotation_inverse('zyx', R_euler)\n{\n    'phi': simplify(phi_rec),\n    'theta': simplify(theta_rec),\n    'psi': simplify(psi_rec)\n}\n# %% [markdown]\n# ## 6. Angle-Axis Representations",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "r = Matrix([rx, ry, rz])\n# Convert from angle-axis to rotation matrix\nR_aa = angle_axis_to_rot_mat(r, alpha)\nR_aa\n# %%\n# Convert back to angle-axis representation\naxis_recovered, angle_recovered = angle_axis_from_rot_mat(R_aa)\n{\n    'recovered_axis': simplify(axis_recovered),\n    'recovered_angle': simplify(angle_recovered)",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "R_aa",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "R_aa = angle_axis_to_rot_mat(r, alpha)\nR_aa\n# %%\n# Convert back to angle-axis representation\naxis_recovered, angle_recovered = angle_axis_from_rot_mat(R_aa)\n{\n    'recovered_axis': simplify(axis_recovered),\n    'recovered_angle': simplify(angle_recovered)\n}\n# %%",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "subs_dict",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "subs_dict = {\n    rx: 1/sqrt(3),  # Normalized vector\n    ry: 1/sqrt(3),\n    rz: 1/sqrt(3),\n    alpha: pi/3\n}\nR_aa.subs(subs_dict).evalf()\n# %% [markdown]\n# ## 5. Homogeneous Transformations (affine_T, affine_get_translation, affine_get_R)\n# Examples of creating and manipulating homogeneous transformation matrices.",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "theta",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "theta = symbols('theta')\ntx, ty, tz = symbols('tx ty tz')\n# Create rotation and translation\nR = elem_rot_mat('z', theta)\nt = Matrix([tx, ty, tz])\n# Create homogeneous transformation matrix\nT = affine_T(R, t)\nT\n# %%\n# Extract components",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "R = elem_rot_mat('z', theta)\nt = Matrix([tx, ty, tz])\n# Create homogeneous transformation matrix\nT = affine_T(R, t)\nT\n# %%\n# Extract components\n{\n    'rotation_matrix': affine_get_R(T),\n    'translation_vector': affine_get_translation(T)",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "t = Matrix([tx, ty, tz])\n# Create homogeneous transformation matrix\nT = affine_T(R, t)\nT\n# %%\n# Extract components\n{\n    'rotation_matrix': affine_get_R(T),\n    'translation_vector': affine_get_translation(T)\n}",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "T = affine_T(R, t)\nT\n# %%\n# Extract components\n{\n    'rotation_matrix': affine_get_R(T),\n    'translation_vector': affine_get_translation(T)\n}\n# %%\n# Numerical example",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "subs_dict",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "subs_dict = {theta: pi/4, tx: 1, ty: 2, tz: 3}\nT_num = T.subs(subs_dict).evalf()\n{\n    'full_transform': T_num,\n    'extracted_rotation': affine_get_R(T_num).evalf(),\n    'extracted_translation': affine_get_translation(T_num).evalf()\n}",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "T_num",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_geometry",
        "description": "robotics_lib.examples.example_geometry",
        "peekOfCode": "T_num = T.subs(subs_dict).evalf()\n{\n    'full_transform': T_num,\n    'extracted_rotation': affine_get_R(T_num).evalf(),\n    'extracted_translation': affine_get_translation(T_num).evalf()\n}",
        "detail": "robotics_lib.examples.example_geometry",
        "documentation": {}
    },
    {
        "label": "l1",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_kinematics",
        "description": "robotics_lib.examples.example_kinematics",
        "peekOfCode": "l1 = symbols('l1', real=True)\n#%% Create DH parameter table\ndh_table = Matrix([\n    [0,      l1,     0,  q1],           # alpha, a, d, theta for joint 1\n    [pi/2,   0,      0,  q2 + pi/2],    # alpha, a, d, theta for joint 2\n    [0,      0,      q3, 0]             # alpha, a, d, theta for joint 3\n])\n# Display DH table\ndh_table\n#%% Calculate transformation matrices",
        "detail": "robotics_lib.examples.example_kinematics",
        "documentation": {}
    },
    {
        "label": "dh_table",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_kinematics",
        "description": "robotics_lib.examples.example_kinematics",
        "peekOfCode": "dh_table = Matrix([\n    [0,      l1,     0,  q1],           # alpha, a, d, theta for joint 1\n    [pi/2,   0,      0,  q2 + pi/2],    # alpha, a, d, theta for joint 2\n    [0,      0,      q3, 0]             # alpha, a, d, theta for joint 3\n])\n# Display DH table\ndh_table\n#%% Calculate transformation matrices\n# Get final transformation matrix T and individual matrices A\nT, A = dh_matrix(dh_table)",
        "detail": "robotics_lib.examples.example_kinematics",
        "documentation": {}
    },
    {
        "label": "f_r_3D",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_kinematics",
        "description": "robotics_lib.examples.example_kinematics",
        "peekOfCode": "f_r_3D = get_f_r(T)\nsimplify(f_r_3D)\n# Select only [X Y PHI] components\nf_r = Matrix([f_r_3D[0], f_r_3D[1], f_r_3D[3]])\nsimplify(f_r)\n#%% Calculate Jacobian\nvars_list = Matrix([q1, q2, q3])\nj = f_r.jacobian(vars_list)\nsimplify(j)\n#%% Transform Jacobian to frame 1",
        "detail": "robotics_lib.examples.example_kinematics",
        "documentation": {}
    },
    {
        "label": "f_r",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_kinematics",
        "description": "robotics_lib.examples.example_kinematics",
        "peekOfCode": "f_r = Matrix([f_r_3D[0], f_r_3D[1], f_r_3D[3]])\nsimplify(f_r)\n#%% Calculate Jacobian\nvars_list = Matrix([q1, q2, q3])\nj = f_r.jacobian(vars_list)\nsimplify(j)\n#%% Transform Jacobian to frame 1\nR0_1 = get_rotation_mat(A[0])\nj1_3 = R0_1.transpose() * j\nsimplify(j1_3)",
        "detail": "robotics_lib.examples.example_kinematics",
        "documentation": {}
    },
    {
        "label": "vars_list",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_kinematics",
        "description": "robotics_lib.examples.example_kinematics",
        "peekOfCode": "vars_list = Matrix([q1, q2, q3])\nj = f_r.jacobian(vars_list)\nsimplify(j)\n#%% Transform Jacobian to frame 1\nR0_1 = get_rotation_mat(A[0])\nj1_3 = R0_1.transpose() * j\nsimplify(j1_3)\n#%% Calculate determinant\ndet_j1_3 = simplify(j1_3.det())\ndet_j1_3",
        "detail": "robotics_lib.examples.example_kinematics",
        "documentation": {}
    },
    {
        "label": "j",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_kinematics",
        "description": "robotics_lib.examples.example_kinematics",
        "peekOfCode": "j = f_r.jacobian(vars_list)\nsimplify(j)\n#%% Transform Jacobian to frame 1\nR0_1 = get_rotation_mat(A[0])\nj1_3 = R0_1.transpose() * j\nsimplify(j1_3)\n#%% Calculate determinant\ndet_j1_3 = simplify(j1_3.det())\ndet_j1_3\n#%% Calculate torques for specific configurations",
        "detail": "robotics_lib.examples.example_kinematics",
        "documentation": {}
    },
    {
        "label": "R0_1",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_kinematics",
        "description": "robotics_lib.examples.example_kinematics",
        "peekOfCode": "R0_1 = get_rotation_mat(A[0])\nj1_3 = R0_1.transpose() * j\nsimplify(j1_3)\n#%% Calculate determinant\ndet_j1_3 = simplify(j1_3.det())\ndet_j1_3\n#%% Calculate torques for specific configurations\n# Define force vector\nf = Matrix([0, 1.5, -4.5])\n# Configuration 1: q1 = π/2, q2 = 0, q3 = 3, l1 = 0.5",
        "detail": "robotics_lib.examples.example_kinematics",
        "documentation": {}
    },
    {
        "label": "j1_3",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_kinematics",
        "description": "robotics_lib.examples.example_kinematics",
        "peekOfCode": "j1_3 = R0_1.transpose() * j\nsimplify(j1_3)\n#%% Calculate determinant\ndet_j1_3 = simplify(j1_3.det())\ndet_j1_3\n#%% Calculate torques for specific configurations\n# Define force vector\nf = Matrix([0, 1.5, -4.5])\n# Configuration 1: q1 = π/2, q2 = 0, q3 = 3, l1 = 0.5\nj_0 = j.subs({q1: pi/2, q2: 0, q3: 3, l1: 0.5})",
        "detail": "robotics_lib.examples.example_kinematics",
        "documentation": {}
    },
    {
        "label": "det_j1_3",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_kinematics",
        "description": "robotics_lib.examples.example_kinematics",
        "peekOfCode": "det_j1_3 = simplify(j1_3.det())\ndet_j1_3\n#%% Calculate torques for specific configurations\n# Define force vector\nf = Matrix([0, 1.5, -4.5])\n# Configuration 1: q1 = π/2, q2 = 0, q3 = 3, l1 = 0.5\nj_0 = j.subs({q1: pi/2, q2: 0, q3: 3, l1: 0.5})\ntau_0 = -j_0 * f\ntau_0.evalf()\n# Configuration 2: q1 = 0, q2 = π/2, q3 = 0, l1 = 0.5",
        "detail": "robotics_lib.examples.example_kinematics",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_kinematics",
        "description": "robotics_lib.examples.example_kinematics",
        "peekOfCode": "f = Matrix([0, 1.5, -4.5])\n# Configuration 1: q1 = π/2, q2 = 0, q3 = 3, l1 = 0.5\nj_0 = j.subs({q1: pi/2, q2: 0, q3: 3, l1: 0.5})\ntau_0 = -j_0 * f\ntau_0.evalf()\n# Configuration 2: q1 = 0, q2 = π/2, q3 = 0, l1 = 0.5\nj_s = j.subs({q1: 0, q2: pi/2, q3: 0, l1: 0.5})\ntau_s = -j_s * f\ntau_s.evalf()\n#%% Visualize results",
        "detail": "robotics_lib.examples.example_kinematics",
        "documentation": {}
    },
    {
        "label": "j_0",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_kinematics",
        "description": "robotics_lib.examples.example_kinematics",
        "peekOfCode": "j_0 = j.subs({q1: pi/2, q2: 0, q3: 3, l1: 0.5})\ntau_0 = -j_0 * f\ntau_0.evalf()\n# Configuration 2: q1 = 0, q2 = π/2, q3 = 0, l1 = 0.5\nj_s = j.subs({q1: 0, q2: pi/2, q3: 0, l1: 0.5})\ntau_s = -j_s * f\ntau_s.evalf()\n#%% Visualize results\nplt.style.use('seaborn')\nplt.figure(figsize=(12, 8))",
        "detail": "robotics_lib.examples.example_kinematics",
        "documentation": {}
    },
    {
        "label": "tau_0",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_kinematics",
        "description": "robotics_lib.examples.example_kinematics",
        "peekOfCode": "tau_0 = -j_0 * f\ntau_0.evalf()\n# Configuration 2: q1 = 0, q2 = π/2, q3 = 0, l1 = 0.5\nj_s = j.subs({q1: 0, q2: pi/2, q3: 0, l1: 0.5})\ntau_s = -j_s * f\ntau_s.evalf()\n#%% Visualize results\nplt.style.use('seaborn')\nplt.figure(figsize=(12, 8))\n# Calculate torques for different q1 values",
        "detail": "robotics_lib.examples.example_kinematics",
        "documentation": {}
    },
    {
        "label": "j_s",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_kinematics",
        "description": "robotics_lib.examples.example_kinematics",
        "peekOfCode": "j_s = j.subs({q1: 0, q2: pi/2, q3: 0, l1: 0.5})\ntau_s = -j_s * f\ntau_s.evalf()\n#%% Visualize results\nplt.style.use('seaborn')\nplt.figure(figsize=(12, 8))\n# Calculate torques for different q1 values\nq1_vals = np.linspace(-pi/2, pi/2, 100)\ntorques = []\nfor q1_val in q1_vals:",
        "detail": "robotics_lib.examples.example_kinematics",
        "documentation": {}
    },
    {
        "label": "tau_s",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_kinematics",
        "description": "robotics_lib.examples.example_kinematics",
        "peekOfCode": "tau_s = -j_s * f\ntau_s.evalf()\n#%% Visualize results\nplt.style.use('seaborn')\nplt.figure(figsize=(12, 8))\n# Calculate torques for different q1 values\nq1_vals = np.linspace(-pi/2, pi/2, 100)\ntorques = []\nfor q1_val in q1_vals:\n    j_val = j.subs({q1: q1_val, q2: 0, q3: 0, l1: 0.5})",
        "detail": "robotics_lib.examples.example_kinematics",
        "documentation": {}
    },
    {
        "label": "q1_vals",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_kinematics",
        "description": "robotics_lib.examples.example_kinematics",
        "peekOfCode": "q1_vals = np.linspace(-pi/2, pi/2, 100)\ntorques = []\nfor q1_val in q1_vals:\n    j_val = j.subs({q1: q1_val, q2: 0, q3: 0, l1: 0.5})\n    tau = -j_val * f\n    torques.append([float(tau[i].evalf()) for i in range(3)])\ntorques = np.array(torques)\n# Create plot\nplt.plot(q1_vals, torques[:, 0], label='τ1', linewidth=2)\nplt.plot(q1_vals, torques[:, 1], label='τ2', linewidth=2)",
        "detail": "robotics_lib.examples.example_kinematics",
        "documentation": {}
    },
    {
        "label": "torques",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_kinematics",
        "description": "robotics_lib.examples.example_kinematics",
        "peekOfCode": "torques = []\nfor q1_val in q1_vals:\n    j_val = j.subs({q1: q1_val, q2: 0, q3: 0, l1: 0.5})\n    tau = -j_val * f\n    torques.append([float(tau[i].evalf()) for i in range(3)])\ntorques = np.array(torques)\n# Create plot\nplt.plot(q1_vals, torques[:, 0], label='τ1', linewidth=2)\nplt.plot(q1_vals, torques[:, 1], label='τ2', linewidth=2)\nplt.plot(q1_vals, torques[:, 2], label='τ3', linewidth=2)",
        "detail": "robotics_lib.examples.example_kinematics",
        "documentation": {}
    },
    {
        "label": "torques",
        "kind": 5,
        "importPath": "robotics_lib.examples.example_kinematics",
        "description": "robotics_lib.examples.example_kinematics",
        "peekOfCode": "torques = np.array(torques)\n# Create plot\nplt.plot(q1_vals, torques[:, 0], label='τ1', linewidth=2)\nplt.plot(q1_vals, torques[:, 1], label='τ2', linewidth=2)\nplt.plot(q1_vals, torques[:, 2], label='τ3', linewidth=2)\nplt.grid(True, alpha=0.3)\nplt.xlabel('Joint angle q1 (rad)', fontsize=12)\nplt.ylabel('Torque (N⋅m)', fontsize=12)\nplt.title('Joint Torques vs q1', fontsize=14, pad=20)\nplt.legend(fontsize=10)",
        "detail": "robotics_lib.examples.example_kinematics",
        "documentation": {}
    },
    {
        "label": "phi",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "phi = np.deg2rad(40)\ntheta = np.deg2rad(60)\npsi = np.deg2rad(80)\n# Method 1: Using euler_rotation\nR_zxz = euler_rotation('zxz', [phi, theta, psi])\n# Method 2: Using elementary rotations\nR_check = elem_rot_mat('z', phi) @ elem_rot_mat('x', theta) @ elem_rot_mat('z', psi)\n# Display results\n{\n    'euler_rotation_result': R_zxz,",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "theta",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "theta = np.deg2rad(60)\npsi = np.deg2rad(80)\n# Method 1: Using euler_rotation\nR_zxz = euler_rotation('zxz', [phi, theta, psi])\n# Method 2: Using elementary rotations\nR_check = elem_rot_mat('z', phi) @ elem_rot_mat('x', theta) @ elem_rot_mat('z', psi)\n# Display results\n{\n    'euler_rotation_result': R_zxz,\n    'elementary_rotations_result': R_check,",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "psi",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "psi = np.deg2rad(80)\n# Method 1: Using euler_rotation\nR_zxz = euler_rotation('zxz', [phi, theta, psi])\n# Method 2: Using elementary rotations\nR_check = elem_rot_mat('z', phi) @ elem_rot_mat('x', theta) @ elem_rot_mat('z', psi)\n# Display results\n{\n    'euler_rotation_result': R_zxz,\n    'elementary_rotations_result': R_check,\n    'difference': simplify(R_zxz - R_check)  # Should be zero matrix",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "R_zxz",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "R_zxz = euler_rotation('zxz', [phi, theta, psi])\n# Method 2: Using elementary rotations\nR_check = elem_rot_mat('z', phi) @ elem_rot_mat('x', theta) @ elem_rot_mat('z', psi)\n# Display results\n{\n    'euler_rotation_result': R_zxz,\n    'elementary_rotations_result': R_check,\n    'difference': simplify(R_zxz - R_check)  # Should be zero matrix\n}\n# %%",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "R_check",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "R_check = elem_rot_mat('z', phi) @ elem_rot_mat('x', theta) @ elem_rot_mat('z', psi)\n# Display results\n{\n    'euler_rotation_result': R_zxz,\n    'elementary_rotations_result': R_check,\n    'difference': simplify(R_zxz - R_check)  # Should be zero matrix\n}\n# %%\n# Inverse computation\nphi_inv, theta_inv, psi_inv = euler_rotation_inverse('zxz', R_zxz, True)  # True for positive solution",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "angles_deg",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "angles_deg = {\n    'phi_deg': float(phi_inv.evalf()) * 180/pi,\n    'theta_deg': float(theta_inv.evalf()) * 180/pi,\n    'psi_deg': float(psi_inv.evalf()) * 180/pi\n}\nangles_deg\n# %% [markdown]\n# ## 2. RPY Angles (Fixed XYZ)\n# Example of RPY rotation with fixed axes\n# %%",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "psi",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "psi = np.deg2rad(80)    # ROT X\ntheta = np.deg2rad(60)  # ROT Y\nphi = np.deg2rad(40)    # ROT Z\n# Method 1: Using rpy_rotation\nR_rpy = rpy_rotation('xyz', [psi, theta, phi])\n# Method 2: Using elementary rotations (fixed axes)\nR_check = elem_rot_mat('z', phi) @ elem_rot_mat('y', theta) @ elem_rot_mat('x', psi)\n# Display results\n{\n    'rpy_rotation_result': R_rpy,",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "theta",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "theta = np.deg2rad(60)  # ROT Y\nphi = np.deg2rad(40)    # ROT Z\n# Method 1: Using rpy_rotation\nR_rpy = rpy_rotation('xyz', [psi, theta, phi])\n# Method 2: Using elementary rotations (fixed axes)\nR_check = elem_rot_mat('z', phi) @ elem_rot_mat('y', theta) @ elem_rot_mat('x', psi)\n# Display results\n{\n    'rpy_rotation_result': R_rpy,\n    'elementary_rotations_result': R_check,",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "phi",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "phi = np.deg2rad(40)    # ROT Z\n# Method 1: Using rpy_rotation\nR_rpy = rpy_rotation('xyz', [psi, theta, phi])\n# Method 2: Using elementary rotations (fixed axes)\nR_check = elem_rot_mat('z', phi) @ elem_rot_mat('y', theta) @ elem_rot_mat('x', psi)\n# Display results\n{\n    'rpy_rotation_result': R_rpy,\n    'elementary_rotations_result': R_check,\n    'difference': simplify(R_rpy - R_check)  # Should be zero matrix",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "R_rpy",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "R_rpy = rpy_rotation('xyz', [psi, theta, phi])\n# Method 2: Using elementary rotations (fixed axes)\nR_check = elem_rot_mat('z', phi) @ elem_rot_mat('y', theta) @ elem_rot_mat('x', psi)\n# Display results\n{\n    'rpy_rotation_result': R_rpy,\n    'elementary_rotations_result': R_check,\n    'difference': simplify(R_rpy - R_check)  # Should be zero matrix\n}\n# %%",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "R_check",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "R_check = elem_rot_mat('z', phi) @ elem_rot_mat('y', theta) @ elem_rot_mat('x', psi)\n# Display results\n{\n    'rpy_rotation_result': R_rpy,\n    'elementary_rotations_result': R_check,\n    'difference': simplify(R_rpy - R_check)  # Should be zero matrix\n}\n# %%\n# Inverse computation for RPY angles\nphi_inv, theta_inv, psi_inv = euler_rotation_inverse('xyz', R_rpy, True)",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "angles_deg",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "angles_deg = {\n    'phi_deg': float(phi_inv.evalf()) * 180/pi,\n    'theta_deg': float(theta_inv.evalf()) * 180/pi,\n    'psi_deg': float(psi_inv.evalf()) * 180/pi\n}\nangles_deg\n# %% [markdown]\n# ## 3. Angle-Axis Representation\n# Example of angle-axis rotation and conversion\n# %%",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "r = Matrix([-1, 1, 1])\n#%% Normalize the axis\nr = r / sqrt(r.dot(r))\n#%%\ntheta = np.deg2rad(65)\ntheta\n#%% Convert to rotation matrix\nR = angle_axis_to_rot_mat(r, theta)\nR\n#%% Convert back to angle-axis",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "r = r / sqrt(r.dot(r))\n#%%\ntheta = np.deg2rad(65)\ntheta\n#%% Convert to rotation matrix\nR = angle_axis_to_rot_mat(r, theta)\nR\n#%% Convert back to angle-axis\naxis_recovered, angle_recovered = angle_axis_from_rot_mat(R)\n{",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "theta",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "theta = np.deg2rad(65)\ntheta\n#%% Convert to rotation matrix\nR = angle_axis_to_rot_mat(r, theta)\nR\n#%% Convert back to angle-axis\naxis_recovered, angle_recovered = angle_axis_from_rot_mat(R)\n{\n    'original_axis': r,\n    'recovered_axis': simplify(axis_recovered),",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "R = angle_axis_to_rot_mat(r, theta)\nR\n#%% Convert back to angle-axis\naxis_recovered, angle_recovered = angle_axis_from_rot_mat(R)\n{\n    'original_axis': r,\n    'recovered_axis': simplify(axis_recovered),\n    'original_angle_deg': 65,\n    'recovered_angle_deg': float(angle_recovered.evalf()) * 180/pi\n}",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "R_singular",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "R_singular = Matrix([\n    [-1, 0, 0],\n    [0, -1/sqrt(2), -1/sqrt(2)],\n    [0, -1/sqrt(2), 1/sqrt(2)]\n])\n# Try to recover angle-axis\naxis_sing, angle_sing = angle_axis_from_rot_mat(R_singular)\n{\n    'singular_axis': simplify(axis_sing),\n    'singular_angle_deg': float(angle_sing.evalf()) * 180/pi",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "alpha_1",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "alpha_1 = -pi/2  # referred to Z\nalpha_2 = -pi/4  # referred to Y\nalpha_3 = pi/4   # referred to X\n#%% R_X(alpha_3)*R_Y(alpha_2)*R_Z(alpha_1)\nR_ZYX = euler_rotation('xyz', [alpha_3, alpha_2, alpha_1])\n#%% Find eigenvectors and eigenvalues\nM = Matrix(R_ZYX)\neigensystem = M.eigenvects()\n# Find the eigenvector corresponding to eigenvalue 1\ninvariant_axis = None",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "alpha_2",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "alpha_2 = -pi/4  # referred to Y\nalpha_3 = pi/4   # referred to X\n#%% R_X(alpha_3)*R_Y(alpha_2)*R_Z(alpha_1)\nR_ZYX = euler_rotation('xyz', [alpha_3, alpha_2, alpha_1])\n#%% Find eigenvectors and eigenvalues\nM = Matrix(R_ZYX)\neigensystem = M.eigenvects()\n# Find the eigenvector corresponding to eigenvalue 1\ninvariant_axis = None\nfor eigenval, multiplicity, eigenvects in eigensystem:",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "alpha_3",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "alpha_3 = pi/4   # referred to X\n#%% R_X(alpha_3)*R_Y(alpha_2)*R_Z(alpha_1)\nR_ZYX = euler_rotation('xyz', [alpha_3, alpha_2, alpha_1])\n#%% Find eigenvectors and eigenvalues\nM = Matrix(R_ZYX)\neigensystem = M.eigenvects()\n# Find the eigenvector corresponding to eigenvalue 1\ninvariant_axis = None\nfor eigenval, multiplicity, eigenvects in eigensystem:\n    if abs(eigenval - 1) < 1e-10:  # Check if eigenvalue is 1",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "R_ZYX",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "R_ZYX = euler_rotation('xyz', [alpha_3, alpha_2, alpha_1])\n#%% Find eigenvectors and eigenvalues\nM = Matrix(R_ZYX)\neigensystem = M.eigenvects()\n# Find the eigenvector corresponding to eigenvalue 1\ninvariant_axis = None\nfor eigenval, multiplicity, eigenvects in eigensystem:\n    if abs(eigenval - 1) < 1e-10:  # Check if eigenvalue is 1\n        invariant_axis = eigenvects[0]\n        break",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "M = Matrix(R_ZYX)\neigensystem = M.eigenvects()\n# Find the eigenvector corresponding to eigenvalue 1\ninvariant_axis = None\nfor eigenval, multiplicity, eigenvects in eigensystem:\n    if abs(eigenval - 1) < 1e-10:  # Check if eigenvalue is 1\n        invariant_axis = eigenvects[0]\n        break\n# Normalize the invariant axis\nif invariant_axis is not None:",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "eigensystem",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "eigensystem = M.eigenvects()\n# Find the eigenvector corresponding to eigenvalue 1\ninvariant_axis = None\nfor eigenval, multiplicity, eigenvects in eigensystem:\n    if abs(eigenval - 1) < 1e-10:  # Check if eigenvalue is 1\n        invariant_axis = eigenvects[0]\n        break\n# Normalize the invariant axis\nif invariant_axis is not None:\n    invariant_axis = invariant_axis / sqrt(invariant_axis.dot(invariant_axis))",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "invariant_axis",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "invariant_axis = None\nfor eigenval, multiplicity, eigenvects in eigensystem:\n    if abs(eigenval - 1) < 1e-10:  # Check if eigenvalue is 1\n        invariant_axis = eigenvects[0]\n        break\n# Normalize the invariant axis\nif invariant_axis is not None:\n    invariant_axis = invariant_axis / sqrt(invariant_axis.dot(invariant_axis))\n{\n    'rotation_matrix': R_ZYX,",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "alpha_1",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "alpha_1 = -pi/2  # Z rotation\nalpha_2 = -pi/4  # Y rotation\nalpha_3 = pi/4   # X rotation\n# Create rotation matrix\nR_ZYX = euler_rotation('xyz', [alpha_3, alpha_2, alpha_1])\n# Convert to various representations\n# 1. Back to Euler angles\neuler_angles = euler_rotation_inverse('xyz', R_ZYX, True)\n# 2. To angle-axis representation\naxis, angle = angle_axis_from_rot_mat(R_ZYX)",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "alpha_2",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "alpha_2 = -pi/4  # Y rotation\nalpha_3 = pi/4   # X rotation\n# Create rotation matrix\nR_ZYX = euler_rotation('xyz', [alpha_3, alpha_2, alpha_1])\n# Convert to various representations\n# 1. Back to Euler angles\neuler_angles = euler_rotation_inverse('xyz', R_ZYX, True)\n# 2. To angle-axis representation\naxis, angle = angle_axis_from_rot_mat(R_ZYX)\n# 3. Extract elementary rotations",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "alpha_3",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "alpha_3 = pi/4   # X rotation\n# Create rotation matrix\nR_ZYX = euler_rotation('xyz', [alpha_3, alpha_2, alpha_1])\n# Convert to various representations\n# 1. Back to Euler angles\neuler_angles = euler_rotation_inverse('xyz', R_ZYX, True)\n# 2. To angle-axis representation\naxis, angle = angle_axis_from_rot_mat(R_ZYX)\n# 3. Extract elementary rotations\nRz = elem_rot_mat_inverse('z', R_ZYX)",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "R_ZYX",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "R_ZYX = euler_rotation('xyz', [alpha_3, alpha_2, alpha_1])\n# Convert to various representations\n# 1. Back to Euler angles\neuler_angles = euler_rotation_inverse('xyz', R_ZYX, True)\n# 2. To angle-axis representation\naxis, angle = angle_axis_from_rot_mat(R_ZYX)\n# 3. Extract elementary rotations\nRz = elem_rot_mat_inverse('z', R_ZYX)\nRy = elem_rot_mat_inverse('y', elem_rot_mat('z', -Rz) @ R_ZYX)\nRx = elem_rot_mat_inverse('x', elem_rot_mat('y', -Ry) @ elem_rot_mat('z', -Rz) @ R_ZYX)",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "euler_angles",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "euler_angles = euler_rotation_inverse('xyz', R_ZYX, True)\n# 2. To angle-axis representation\naxis, angle = angle_axis_from_rot_mat(R_ZYX)\n# 3. Extract elementary rotations\nRz = elem_rot_mat_inverse('z', R_ZYX)\nRy = elem_rot_mat_inverse('y', elem_rot_mat('z', -Rz) @ R_ZYX)\nRx = elem_rot_mat_inverse('x', elem_rot_mat('y', -Ry) @ elem_rot_mat('z', -Rz) @ R_ZYX)\nresults = {\n    'original_matrix': simplify(R_ZYX),\n    'euler_angles': [float(angle.evalf()) for angle in euler_angles],",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "Rz",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "Rz = elem_rot_mat_inverse('z', R_ZYX)\nRy = elem_rot_mat_inverse('y', elem_rot_mat('z', -Rz) @ R_ZYX)\nRx = elem_rot_mat_inverse('x', elem_rot_mat('y', -Ry) @ elem_rot_mat('z', -Rz) @ R_ZYX)\nresults = {\n    'original_matrix': simplify(R_ZYX),\n    'euler_angles': [float(angle.evalf()) for angle in euler_angles],\n    'angle_axis': {\n        'axis': simplify(axis),\n        'angle': float(angle.evalf())\n    },",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "Ry",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "Ry = elem_rot_mat_inverse('y', elem_rot_mat('z', -Rz) @ R_ZYX)\nRx = elem_rot_mat_inverse('x', elem_rot_mat('y', -Ry) @ elem_rot_mat('z', -Rz) @ R_ZYX)\nresults = {\n    'original_matrix': simplify(R_ZYX),\n    'euler_angles': [float(angle.evalf()) for angle in euler_angles],\n    'angle_axis': {\n        'axis': simplify(axis),\n        'angle': float(angle.evalf())\n    },\n    'elementary_angles': {",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "Rx",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "Rx = elem_rot_mat_inverse('x', elem_rot_mat('y', -Ry) @ elem_rot_mat('z', -Rz) @ R_ZYX)\nresults = {\n    'original_matrix': simplify(R_ZYX),\n    'euler_angles': [float(angle.evalf()) for angle in euler_angles],\n    'angle_axis': {\n        'axis': simplify(axis),\n        'angle': float(angle.evalf())\n    },\n    'elementary_angles': {\n        'z_angle': float(Rz.evalf()),",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "robotics_lib.examples.rotation-examples",
        "description": "robotics_lib.examples.rotation-examples",
        "peekOfCode": "results = {\n    'original_matrix': simplify(R_ZYX),\n    'euler_angles': [float(angle.evalf()) for angle in euler_angles],\n    'angle_axis': {\n        'axis': simplify(axis),\n        'angle': float(angle.evalf())\n    },\n    'elementary_angles': {\n        'z_angle': float(Rz.evalf()),\n        'y_angle': float(Ry.evalf()),",
        "detail": "robotics_lib.examples.rotation-examples",
        "documentation": {}
    },
    {
        "label": "elem_rot_mat",
        "kind": 2,
        "importPath": "robotics_lib.geometric",
        "description": "robotics_lib.geometric",
        "peekOfCode": "def elem_rot_mat(axis: str, angle: sp.Symbol) -> sp.Matrix:\n    \"\"\"\n    Create an elementary rotation matrix about a specified axis.\n    Parameters:\n    -----------\n    axis: str\n        The axis about which to rotate ('x', 'y', or 'z')\n    angle: sp.Symbol\n        The angle of rotation (symbolic)\n    Returns:",
        "detail": "robotics_lib.geometric",
        "documentation": {}
    },
    {
        "label": "euler_rotation",
        "kind": 2,
        "importPath": "robotics_lib.geometric",
        "description": "robotics_lib.geometric",
        "peekOfCode": "def euler_rotation(sequence: str, angles: List[sp.Symbol]) -> sp.Matrix:\n    \"\"\"\n    Compute Euler rotation matrix for given sequence and angles.\n    Parameters:\n    -----------\n    sequence: str\n        String specifying rotation sequence (e.g., 'xyz', 'zyx')\n    angles: list\n        List of three symbolic angles\n    Returns:",
        "detail": "robotics_lib.geometric",
        "documentation": {}
    },
    {
        "label": "rpy_rotation",
        "kind": 2,
        "importPath": "robotics_lib.geometric",
        "description": "robotics_lib.geometric",
        "peekOfCode": "def rpy_rotation(sequence: str, angles: List[sp.Symbol]) -> sp.Matrix:\n    \"\"\"\n    Compute Roll-Pitch-Yaw rotation matrix for given sequence and angles.\n    RPY rotations work about fixed axes (unlike Euler rotations which work about moving axes).\n    Parameters:\n    -----------\n    sequence: str\n        String specifying rotation sequence (e.g., 'xyz', 'zyx')\n    angles: list\n        List of three symbolic angles",
        "detail": "robotics_lib.geometric",
        "documentation": {}
    },
    {
        "label": "angle_axis_rotation_direct",
        "kind": 2,
        "importPath": "robotics_lib.geometric",
        "description": "robotics_lib.geometric",
        "peekOfCode": "def angle_axis_rotation_direct(r: sp.Matrix, theta: sp.Symbol) -> sp.Matrix:\n    \"\"\"\n    Compute rotation matrix from axis-angle representation (Rodrigues' formula).\n    Parameters:\n    -----------\n    r: sp.Matrix\n        Unit vector specifying rotation axis\n    theta: sp.Symbol\n        Rotation angle\n    Returns:",
        "detail": "robotics_lib.geometric",
        "documentation": {}
    },
    {
        "label": "affine_T",
        "kind": 2,
        "importPath": "robotics_lib.geometric",
        "description": "robotics_lib.geometric",
        "peekOfCode": "def affine_T(rotation_matrix: sp.Matrix, translation: sp.Matrix) -> sp.Matrix:\n    \"\"\"\n    Create homogeneous transformation matrix from rotation matrix and translation vector.\n    Parameters:\n    -----------\n    rotation_matrix: sp.Matrix\n        3x3 rotation matrix\n    translation: sp.Matrix\n        3x1 translation vector\n    Returns:",
        "detail": "robotics_lib.geometric",
        "documentation": {}
    },
    {
        "label": "affine_get_translation",
        "kind": 2,
        "importPath": "robotics_lib.geometric",
        "description": "robotics_lib.geometric",
        "peekOfCode": "def affine_get_translation(T: sp.Matrix) -> sp.Matrix:\n    \"\"\"Extract translation vector from homogeneous transformation matrix.\"\"\"\n    return T[:3, 3]\ndef affine_get_R(T: sp.Matrix) -> sp.Matrix:\n    \"\"\"Extract rotation matrix from homogeneous transformation matrix.\"\"\"\n    return T[:3, :3]\ndef elem_rot_mat_inverse(axis: str, rotation_matrix: sp.Matrix) -> sp.Expr:\n    \"\"\"\n    Extract the rotation angle about a given axis from a rotation matrix.\n    Parameters:",
        "detail": "robotics_lib.geometric",
        "documentation": {}
    },
    {
        "label": "affine_get_R",
        "kind": 2,
        "importPath": "robotics_lib.geometric",
        "description": "robotics_lib.geometric",
        "peekOfCode": "def affine_get_R(T: sp.Matrix) -> sp.Matrix:\n    \"\"\"Extract rotation matrix from homogeneous transformation matrix.\"\"\"\n    return T[:3, :3]\ndef elem_rot_mat_inverse(axis: str, rotation_matrix: sp.Matrix) -> sp.Expr:\n    \"\"\"\n    Extract the rotation angle about a given axis from a rotation matrix.\n    Parameters:\n    -----------\n    axis: str\n        The axis of rotation ('x', 'y', or 'z')",
        "detail": "robotics_lib.geometric",
        "documentation": {}
    },
    {
        "label": "elem_rot_mat_inverse",
        "kind": 2,
        "importPath": "robotics_lib.geometric",
        "description": "robotics_lib.geometric",
        "peekOfCode": "def elem_rot_mat_inverse(axis: str, rotation_matrix: sp.Matrix) -> sp.Expr:\n    \"\"\"\n    Extract the rotation angle about a given axis from a rotation matrix.\n    Parameters:\n    -----------\n    axis: str\n        The axis of rotation ('x', 'y', or 'z')\n    rotation_matrix: sp.Matrix\n        3x3 rotation matrix\n    Returns:",
        "detail": "robotics_lib.geometric",
        "documentation": {}
    },
    {
        "label": "euler_rotation_inverse",
        "kind": 2,
        "importPath": "robotics_lib.geometric",
        "description": "robotics_lib.geometric",
        "peekOfCode": "def euler_rotation_inverse(sequence: str, rotation_matrix: sp.Matrix, positive_solution: bool = True) -> Tuple[sp.Expr, sp.Expr, sp.Expr]:\n    \"\"\"\n    Extract Euler angles from a rotation matrix.\n    Parameters:\n    -----------\n    sequence: str\n        String specifying rotation sequence (e.g., 'xyz', 'zyx')\n    rotation_matrix: sp.Matrix\n        3x3 rotation matrix\n    positive_solution: bool",
        "detail": "robotics_lib.geometric",
        "documentation": {}
    },
    {
        "label": "angle_axis_to_rot_mat",
        "kind": 2,
        "importPath": "robotics_lib.geometric",
        "description": "robotics_lib.geometric",
        "peekOfCode": "def angle_axis_to_rot_mat(axis: sp.Matrix, angle: sp.Symbol) -> sp.Matrix:\n    \"\"\"\n    Convert angle-axis representation to rotation matrix using Rodrigues' formula.\n    Parameters:\n    -----------\n    axis: sp.Matrix\n        3x1 unit vector representing rotation axis\n    angle: sp.Symbol\n        Rotation angle\n    Returns:",
        "detail": "robotics_lib.geometric",
        "documentation": {}
    },
    {
        "label": "angle_axis_from_rot_mat",
        "kind": 2,
        "importPath": "robotics_lib.geometric",
        "description": "robotics_lib.geometric",
        "peekOfCode": "def angle_axis_from_rot_mat(R: sp.Matrix) -> Tuple[sp.Matrix, sp.Expr]:\n    \"\"\"\n    Extract axis and angle from rotation matrix.\n    Parameters:\n    -----------\n    R: sp.Matrix\n        3x3 rotation matrix\n    Returns:\n    --------\n    axis: sp.Matrix",
        "detail": "robotics_lib.geometric",
        "documentation": {}
    },
    {
        "label": "dh_matrix",
        "kind": 2,
        "importPath": "robotics_lib.kinematics",
        "description": "robotics_lib.kinematics",
        "peekOfCode": "def dh_matrix(dh_table):\n    \"\"\"\n    Calculate the DH transformation matrix for robot kinematics.\n    Parameters:\n    dh_table: sympy Matrix of shape (n,4)\n           Each row contains [alpha, a, d, theta] parameters\n    Returns:\n    T: The final transformation matrix (product of all individual transformations)\n    A: List of individual transformation matrices\n    \"\"\"",
        "detail": "robotics_lib.kinematics",
        "documentation": {}
    },
    {
        "label": "get_f_r",
        "kind": 2,
        "importPath": "robotics_lib.kinematics",
        "description": "robotics_lib.kinematics",
        "peekOfCode": "def get_f_r(T):\n    \"\"\"\n    Get the forward kinematics mapping from joint space to Cartesian space.\n    Parameters:\n    T: sympy Matrix\n       Homogeneous transformation matrix (symbolic)\n    Returns:\n    f_r: sympy Matrix\n         Forward kinematics mapping [x, y, z, alpha_z]\n    \"\"\"",
        "detail": "robotics_lib.kinematics",
        "documentation": {}
    },
    {
        "label": "get_rotation_mat",
        "kind": 2,
        "importPath": "robotics_lib.kinematics",
        "description": "robotics_lib.kinematics",
        "peekOfCode": "def get_rotation_mat(T):\n    \"\"\"\n    Extract the rotation matrix from a homogeneous transformation matrix.\n    Parameters:\n    T: sympy Matrix (4x4)\n       Homogeneous transformation matrix\n    Returns:\n    R: sympy Matrix (3x3)\n       Rotation matrix\n    \"\"\"",
        "detail": "robotics_lib.kinematics",
        "documentation": {}
    },
    {
        "label": "geometric_jacobian",
        "kind": 2,
        "importPath": "robotics_lib.kinematics",
        "description": "robotics_lib.kinematics",
        "peekOfCode": "def geometric_jacobian(f_r, sequence, q_in, dh_params):\n    \"\"\"\n    Calculate the geometric Jacobian for a robot manipulator.\n    Parameters:\n    f_r: sympy Matrix\n        Forward kinematics mapping [x, y, z, alpha_z]\n    sequence: str\n        A string containing the sequence of 'r's and 'p's for revolute and prismatic joints\n    q_in: sympy Matrix\n        Column vector of joint variables",
        "detail": "robotics_lib.kinematics",
        "documentation": {}
    }
]